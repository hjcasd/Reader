plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

def config = rootProject.ext.android
def lib = rootProject.ext.dependencies

//获取当前日期
def static releaseTime() {
    return new Date().format("yyyy-MM-dd")
}

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        applicationId "com.hjc.reader"
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            // 设置支持的SO库架构(必须设置如下几种,否则X5会初始化失败)
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }

        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }


    }

    //指定打包路径和apk名称
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def fileName = "Reader_V${variant.versionName}"
            fileName = fileName + "_${releaseTime()}"
            if ('debug' == variant.buildType.name) {
                fileName = fileName + "_debug.apk"
            } else {
                fileName = fileName + "_release.apk"
            }
            outputFileName = fileName
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding = true
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {

    testImplementation lib.junit
    androidTestImplementation lib.test_junit
    androidTestImplementation lib.espresso_core

    kapt lib.arouter_compiler

    implementation project(':library-common')

    // 是否独立运行
    if (!isRunModule.toBoolean()) {
        implementation project(':module-main')
        implementation project(':module-login')
        implementation project(':module-wan')
        implementation project(':module-gank')
    }
}